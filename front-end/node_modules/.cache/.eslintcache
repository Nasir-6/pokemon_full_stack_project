[{"/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/index.js":"1","/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/App.js":"2","/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/reportWebVitals.js":"3","/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/Constants.js":"4","/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/containers/Footer.js":"5","/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/pages/Pokedex.js":"6","/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/pages/Login.js":"7","/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/pages/Signup.js":"8","/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/containers/Navbar.js":"9","/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/pages/Home.js":"10","/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/pages/Map.js":"11","/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/components/Pokemon.js":"12"},{"size":500,"mtime":1650219680773,"results":"13","hashOfConfig":"14"},{"size":2642,"mtime":1652821077492,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1650219680773,"results":"16","hashOfConfig":"14"},{"size":198,"mtime":1652820777944,"results":"17","hashOfConfig":"14"},{"size":1237,"mtime":1650219680744,"results":"18","hashOfConfig":"14"},{"size":3835,"mtime":1652820554171,"results":"19","hashOfConfig":"14"},{"size":2649,"mtime":1652957710339,"results":"20","hashOfConfig":"14"},{"size":3042,"mtime":1652820575122,"results":"21","hashOfConfig":"14"},{"size":1337,"mtime":1650219680744,"results":"22","hashOfConfig":"14"},{"size":1584,"mtime":1650219680773,"results":"23","hashOfConfig":"14"},{"size":6506,"mtime":1652820504068,"results":"24","hashOfConfig":"14"},{"size":910,"mtime":1650219680744,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6y04zd",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},"/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/index.js",[],[],"/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/App.js",["70","71","72"],[],"\nimport './App.css';\nimport Navbar from './containers/Navbar';\nimport Footer from './containers/Footer';\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Map from './pages/Map';\nimport Signup from './pages/Signup';\nimport Pokedex from './pages/Pokedex';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\nimport { useState, useEffect } from 'react';\nimport { SERVER_URL } from './Constants';\n\n\nfunction App() {\n\n  // console.log(SERVER_URL)\n  if(process.env.NODE_ENV != 'production') console.log(\"Please ensure you are running the local intelliJ Server on port 8080, as you are not running the production build!\")\n  const [currentUser, setCurrentUser] = useState(\"\");\n\n  //Store the currentUser in sessionStorage everytime it changes\n  useEffect(()=>{\n    // If statement prevents overwriting the sessionStorage on refresh with empty string \"\"\n    // whilst also allowing logged out (null user) information to be stored in sessionStorage\n    // Keeping track of both logged in/out user states\n    if(currentUser != \"\"){\n      sessionStorage.setItem(\"currentUser\", JSON.stringify(currentUser))\n    }\n  }, [currentUser])\n\n  // USECONTEXT!!! - designed for handling a logged in user! - have state without need for propdrilling!\n  // context is declared as a component - but could use wherever\n  // Redux - managing state - but not for login - used for updating lots of state, - need to design app ahead of time for redux\n  \n\n  // On mount (when Refreshed) retrieve the currentUser stored in sessionStorage \n  useEffect(()=>{\n    // First grab from sessionStorage - Parse into a object as stored as a string in sessionStorage\n    const currentUserInSessionStorage = JSON.parse(sessionStorage.getItem(\"currentUser\"))\n    console.log(currentUserInSessionStorage)\n    setCurrentUser(currentUserInSessionStorage)\n  }, [])\n\n\n\n\n  return (\n    <Router>\n      <div className=\"background-overlay\">\n        <div className=\"app\">\n          <Navbar currentUser={currentUser} updateCurrentUser={(update)=> setCurrentUser(update)}/>\n          \n\n          <Routes>\n            <Route exact path=\"/\" element={<Home currentUser={currentUser} />} />\n            <Route exact path=\"/login\" element={<Login updateCurrentUser={(update)=> setCurrentUser(update)} />}/>\n            <Route exact path=\"/signup\" element={<Signup />} />\n            <Route exact path=\"/map\" element={<Map currentUser={currentUser}/>} />\n            <Route exact path=\"/pokedex\" element={<Pokedex currentUser={currentUser}/>} />\n          </Routes>\n\n          <Footer />\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/reportWebVitals.js",[],[],"/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/Constants.js",["73"],[],"export const SERVER_URL = process.env.NODE_ENV == 'production'? \"http://localhost:5000\" : \"http://localhost:8080\"\n// Port 5000 is the aws elastic beanstalk port which we will deploy whole app onto!!","/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/containers/Footer.js",[],[],"/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/pages/Pokedex.js",["74","75","76","77"],[],"import { useState ,useEffect, useRef } from 'react';\nimport { Pokemon } from '../components/Pokemon';\nimport { SERVER_URL } from '../Constants';\nimport sadBulbasaur from '../images/sad_bulbasaur.png'\nimport surprisedPikachu from '../images/surprised_pikachu.jpeg'\n\nexport default function Pokedex({ currentUser }) {\n  // Testing\n  // console.log(currentUser.id);\n\n  const [userPokemon, setUserPokemon] = useState([]);\n\n  const isMounted = useRef(false);\n\n\n  const getPokemonList= async () => {\n    await fetch(`${SERVER_URL}/pokemon/trainer/${currentUser.id}`)\n    .then((response) => {\n      if (response.status >= 200 && response.status <= 299) {\n        return response.json();\n      } else {\n        console.log(response);\n        throw Error(response.statusText);\n      }\n    })\n    // Setting the state with setUserPokemon\n    .then((data) => setUserPokemon(data))\n  // When currentUser changes the useEffect runs\n  .catch(error => {\n    console.log(error);\n    setUserPokemon([])\n  })\n   }\n\n  useEffect(() => {\n    \n    if (!isMounted.current && currentUser!=\"\") {\n      getPokemonList();\n      isMounted.current = true;\n    }\n    // this return is only on cleanup - when you unmount component (i.e refreshing page)\n    return function cleanup(){isMounted.current = false}\n  }, [currentUser]);\n\n  // Maybe useEffect on unmounting\n\n  // useEffect running on prop change \n  // Never have a useEffect on a propChange \n // delete button function\n\n\n\n const deletePokemonFromDb = async (pokemonId) =>{\n  await fetch(`${SERVER_URL}/pokemon/${pokemonId}`,\n    {\n    method: \"DELETE\",\n  });\n  // Update rendered list after delete\n  getPokemonList();\n }\n\n\n\n\n  // Data is within userPokemon and we want to map the array to display the pokemon\n\n  // The rendered list will be in pokemonList\n  let pokemonList = [];\n\n  pokemonList = userPokemon.map((pokemon) => {\n    return (\n      // We need to make a component called Pokemon which has a singular pokemon\n      // The details are passes down as a prop to the pokemon component and the details are stored in the pokemon variable\n\n      <Pokemon key={pokemon.id} pokemon={pokemon} releasePokemon={(pokemonId) => {deletePokemonFromDb(pokemonId); }}/>\n    );\n  });\n  \n  // if(userPokemon != [] && isMounted.current){\n  //   console.log('Mounted')\n  //   console.log(isMounted.current);\n    \n    \n  //   pokemonList = userPokemon.map((pokemon) => {\n  //     return (\n  //       // We need to make a component called Pokemon which has a singular pokemon\n  //       // The details are passes down as a prop to the pokemon component and the details are stored in the pokemon variable\n  \n  //       <Pokemon key={pokemon.id} pokemon={pokemon} releasePokemon ={(pokemonId) => {deletePokemonFromDb(pokemonId)}} />\n  //     );\n  //   });\n  // }\n  \n\n  return (\n    <div className=\"pokedex-page\">\n      {currentUser==null ? (\n      <div className=\"surprised-pikachu-page\">\n        <img src={surprisedPikachu} alt={`Image of surprised Pikachu`} className=\"surprised-pikachu\" />\n        <p>You can't view your Pokédex if you haven't logged in! Please login!</p>\n      </div>\n      ) : (\n        <><div className=\"pokedex-header\">\n        {/* <h2>{`Hi ${currentUser.name}`}</h2> */}\n        <h1>{`${currentUser.name}'s Pokédex`}</h1>\n        {/* Change this to user's chosen trainer sprite */}\n        <h2>Manage your Pokémon team</h2>\n      </div>\n      <div className=\"all-pokemon-container\">\n        {/* pokemonList has the list of pokemon */}\n        {pokemonList.length === 0 ? ( \n        <div className='sad-bulbasaur-page'> \n        <p>Your Pokédex is empty, please go to the map to catch some Pokémon! </p>\n        <img src={sadBulbasaur} alt={`Image of sad Bulbasaur`} className=\"sad-bulbasaur\" />\n        </div>\n         ) : (pokemonList)}\n      </div>\n      </>\n      )}\n    </div>\n  );\n}\n","/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/pages/Login.js",["78"],[],"import React from 'react'\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom'\nimport squirtle from '../images/squirtle.png';\nimport { SERVER_URL } from '../Constants';\n\n\nexport default function Login({updateCurrentUser}) {\n\n  // NEED THIS TO USE NAVIGATE COMMAND\n  const navigate = useNavigate();\n\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [invalidInputWarning, setInvalidInputWarning] = useState(\"\");\n\n  const getTrainerIfDetailsAreValid = async (trainerDetails) => {\n    const trainer = await fetch(SERVER_URL + \"/trainer/login\",{\n      method:\"POST\",\n      headers:{\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Private-Network': 'true'\n      },\n      body: JSON.stringify(trainerDetails)\n    })\n    .then(response => {\n      if (response.status >= 200 && response.status <= 299) {\n        return response.json();\n      } else {\n        console.log(response);\n        throw Error(response.statusText);\n      }\n    })\n    .catch(error => setInvalidInputWarning(\"Invalid Email or Password\"))\n\n    return trainer;\n  }\n\n\n  \n  // Define logic for submit button press\n  const handleSubmitButton = async (event) => {\n    event.preventDefault();\n    setInvalidInputWarning(\"\")\n\n    // Now send email and password back to get checked by Java Backend\n    // create trainer details object to be passed back to backend\n    const trainerDetails = {\n      \"email\": email,\n      \"password\": password \n    }\n\n    const trainerInDb = await getTrainerIfDetailsAreValid(trainerDetails);\n    console.log(trainerInDb)\n\n    if(trainerInDb != undefined){\n      updateCurrentUser({\n        id: trainerInDb.id,\n        name: trainerInDb.name,\n        sprite_link: trainerInDb.sprite_link\n      })\n      navigate(\"/pokedex\");\n    }\n\n  }\n\n  const handleEmailChange = (event) =>{\n    setEmail(event.target.value);\n  }\n\n  const handlePasswordChange = (event) =>{\n    setPassword(event.target.value);\n  }\n\n\n\n  return (\n    <div className='login-page'>\n      <h1>Login</h1>\n\n      <form  action=\"post\" className='login-form' onSubmit={handleSubmitButton}>\n      <input type=\"text\"  className=\"login-inputs\" placeholder=\"Enter email address\" onChange={handleEmailChange} required></input>\n      <input type=\"password\"  className=\"login-inputs\" placeholder=\"Enter password\" onChange={handlePasswordChange} required></input>\n      <p className=\"invalidText\">{invalidInputWarning}</p>\n      <input type=\"submit\" name=\"login\" id=\"login-btn\" className='btn login-submit-btn' value=\"Login\"/>\n      </form>\n\n      <img src={squirtle} alt=\"spurtle\" />\n\n\n    </div>\n  )\n}\n","/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/pages/Signup.js",["79"],[],"import React from 'react';\nimport {useState} from 'react';\nimport { useNavigate } from 'react-router-dom'\nimport { SERVER_URL } from '../Constants';\nimport charmander from '../images/charmander.png';\n\n\n//may need to change classNames to increase sizing of boxes or just one part?\n\n\n//Taking information from the user and setting that as currentUser (state)\n//Taking that information and updating our database - addingTrainer & Post request\n//catching the error if same email is added \n//flagging it to the user as well\nexport default function Signup() {\n\n\n//use this to navigate to login page\nconst navigate = useNavigate();\n\n\n// set the state\nconst [name,setName]= useState(\"\");\nconst [email,setEmail] = useState(\"\");\nconst [password,setPassword]= useState(\"\");\nconst [invalidInputWarning, setInvalidInputWarning] = useState(\"\");\n\n\nconst addTrainerToDb = async (newTrainerDetails) => {\n  // console.log(newTrainerDetails);\n  const trainer = await fetch(SERVER_URL + \"/trainer\", {\n  method:\"POST\",\n  headers:{\n    'Content-Type':'application/json'\n  },\n  body: JSON.stringify(newTrainerDetails)\n  })\n  .then(response => {\n  if (response.status >= 200 && response.status <= 299) {\n    console.log(response);\n  } else {\n    console.log(response);\n    throw Error(response.statusText);\n  }\n  })\n  .catch(error => setInvalidInputWarning(\"User email is already in use\"))\n\n  return trainer;\n  }\n\n\n//handle the user pressing the signup button\n\n  const handleSignupButton = async (event) =>{\n    event.preventDefault();\n    setInvalidInputWarning(\"\")\n\n//creating new trainer object to be passed onto the backend\n    const newTrainerDetails = {\n      \"name\":name,\n      \"email\": email,\n      \"password\": password,\n      \"sprite_link\": \"replace with actual sprite link\"\n    }\n\n    // console.log(newTrainerDetails);\n    addTrainerToDb(newTrainerDetails);\n\n    navigate(\"/Login\");\n    \n  }\n\n  const handleNameChange = (event) =>{\n    setName(event.target.value);\n  }\n\n  const handleEmailChange = (event) =>{\n    setEmail(event.target.value);\n  }\n\n  const handlePasswordChange = (event) =>{\n    setPassword(event.target.value);\n  }\n\n\n  return (\n    \n    <div className='login-page'>\n      <h1>Sign up</h1>\n    \n      <form action=\"post\" className='signup-form' onSubmit={handleSignupButton}>      \n      <input type=\"text\" className=\"signup-inputs\" placeholder=\"Choose username\" onChange={handleNameChange}required></input>\n      <input type=\"text\" className=\"signup-inputs\" placeholder=\"Enter valid email address\" onChange={handleEmailChange}required></input>\n      <input type=\"password\" className=\"signup-inputs\" placeholder=\"Password\" onChange={handlePasswordChange}required></input>\n      {/* <input type=\"password\" className=\"signup-inputs\" placeholder=\"Confirm\" required></input> */}\n\n      {/* <p className=\"invalidText\">{invalidInputWarning}</p> */}\n      <input type=\"submit\" name=\"signup\" id=\"signup-btn\" className='btn signup-submit-btn' value=\"Sign up\"/>\n      </form>\n\n      <img src={charmander} alt=\"charmander\" />\n\n    </div>\n    \n  )\n}\n","/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/containers/Navbar.js",[],[],"/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/pages/Home.js",["80","81","82","83","84","85","86","87","88"],[],"import React from 'react'\nimport { useState, useEffect } from 'react'\nimport userSprite from '../images/ashSprite.png'\nimport Footer from '../containers/Footer';\nimport home from '../images/home.jpeg';\nimport home_background from '../images/home_background.webp'\nimport pikachu from '../images/pikachu.png'\nimport green_background from '../images/green_background.png'\nimport pikachu_sleep from '../images/pikachu_sleep.jpeg'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faGamepad } from \"@fortawesome/free-solid-svg-icons\";\nimport { useNavigate } from 'react-router-dom'\n\n\n\n\nexport default function Home({currentUser}) {\n\n  const navigate = useNavigate();\n\n  const handleStartButton = () =>{\n    if(currentUser===\"\" || currentUser== null){\n      navigate(\"/login\")\n    } else{\n      navigate(\"/map\")\n    }\n  }\n\n  return (\n    <div className=\"home-container\">\n      <div className=\"home-background-overlay\">\n        <h2 className=\"home-title\">Welcome to PokePals </h2>\n\n        <p className=\"home-text\">\n          With new games, new updates, and new ways to play, join one of the\n          biggest communities in gaming and start catching pokemon today!\n        </p>\n\n        <button className=\"home-btn btn\" onClick={handleStartButton}>\n          {\" \"}\n          <FontAwesomeIcon icon={faGamepad} /> START GAME\n        </button>\n      </div>\n\n      {/* <img src={pikachu_sleep} alt=\"User sprite\" className=\"home_background\" /> */}\n    </div>\n\n    // <div className=\"userSprite\">\n    //   {/* <img src = \"\" alt = \"User sprite\"/> */}\n    // </div>\n  );\n}\n","/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/pages/Map.js",["89","90","91","92","93","94"],[],"import userSprite from \"../images/ashSprite.png\";\nimport { useEffect, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faArrowRight, faArrowLeft, faArrowUp, faArrowDown } from \"@fortawesome/free-solid-svg-icons\";\nimport surprisedPikachu from '../images/surprised_pikachu.jpeg'\nimport { SERVER_URL } from \"../Constants\";\n\n\n\nexport default function Map({currentUser}) {\n\n  const [userPosition, setUserPostion] = useState(10);\n  const [isPokemonCaught, setIsPokemonCaught] = useState(false);\n\n  let gridIndexes = []; \n  // This array will have indexes from 1-GridLength^2 e.g [1,2,3, .... 98, 99, 100] - this is made via the for loop below\n  const GRIDLENGTH = 32;\n  for (let i = 1; i <= GRIDLENGTH ** 2; i++) {\n    gridIndexes.push(i);\n  }\n\n  const grids = gridIndexes.map((index) => {\n    if (index == userPosition) {\n      return <div className={`oneGrid user-grid`}></div>;\n    } else {\n      return <div className={`oneGrid`}></div>;\n    }\n  });\n\n  const moveRight = () => {\n    \n    const isOnRightEdge = (userPosition%GRIDLENGTH == 0)\n    if(!isOnRightEdge){\n      setUserPostion(userPosition+1)\n    } else{\n      console.log('User is on the right edge');\n    }\n  }\n\n  const moveLeft = () => {\n    const isOnLeftEdge = (userPosition%GRIDLENGTH == 1)\n    if(!isOnLeftEdge){\n      setUserPostion(userPosition-1)\n    } else{\n      console.log('User is on the left edge');\n    }\n  }\n\n  const moveUp = () => {\n    const isOnTopEdge = (userPosition>0 && userPosition<=GRIDLENGTH)\n    if(!isOnTopEdge){\n      setUserPostion(userPosition-GRIDLENGTH)\n    } else{\n      console.log('User is on the top edge');\n    }\n    \n  }\n\n  const moveDown = () => {\n    const isOnBottomEdge = (userPosition>(GRIDLENGTH*(GRIDLENGTH-1)) && userPosition<=GRIDLENGTH**2)\n    if(!isOnBottomEdge){\n      setUserPostion(userPosition+GRIDLENGTH)\n    } else{\n      console.log('User is on the bottom edge');\n    }\n    \n  }\n\n\n  // =============== WILD POKEMON GENERATOR CODE =================\n\n  // UseEffect for running ilPokenmonID - when userPosition changes \n  const [wildPokemon, setWildPokemon] = useState({\n    trainer_id: null,\n    name: null,\n    pokeapi_id: null,\n    sprite_link: null,\n    hp: null,\n    level: null\n  });\n  const [wildPokemonId, setWildPokemonId] = useState(1);\n  const [foundWildPokemon, setFoundWildPokemon] = useState(true);\n\n  // fetch a pokemon and console.log the url\n\n  const grabPokemon = async () => {\n    const newPokemon = await fetch(`https://pokeapi.co/api/v2/pokemon/${wildPokemonId}/`)\n    .then(response => response.json())\n\n    let randomLevel = Math.floor(Math.random() * 90) + 5\n\n    // use Slice and upperCase to make first letter UpperCase\n    setWildPokemon({\n      trainer_id: currentUser.id,\n      name: newPokemon.name.charAt(0).toUpperCase() + newPokemon.name.slice(1),\n      pokeapi_id: wildPokemonId,\n      sprite_link: newPokemon.sprites.front_default,\n      hp: randomLevel*13,\n      level: randomLevel\n    });\n}\n\n  useEffect(()=>{\n      grabPokemon();\n  },[wildPokemonId])\n  // Run above useEffect on mount aswell as when wildPokemonId changes state (i.e grabSprite when wildPokemonId change )\n\n  // Function to generate wildPokemonId (between 1 and 493)\n  const wildPokemonIdGenerator = () => {\n\n      //generate probability \n      const wildPokemonProbability = Math.random();\n      if(wildPokemonProbability >= 0.6){\n          // if more than 0.6 - set to found and also set id - \n          setWildPokemonId(Math.floor(Math.random() * 493) + 1);\n          setFoundWildPokemon(true)\n          \n      } else if(wildPokemonProbability < 0.6){\n          setWildPokemon({\n            trainer_id: currentUser.id,\n            name: null,\n            pokeapi_id: null,\n            sprite_link: null,\n            hp: null,\n            level: null\n          }); // set to null so previous pokemon not shown!!\n          setFoundWildPokemon(false)\n      }  \n  }\n\n\n\n  useEffect(()=>{\n    wildPokemonIdGenerator();\n    setIsPokemonCaught(false);\n  }, [userPosition])\n\n\n  const addPokemonToDb = async () => {\n    const result = await fetch(SERVER_URL + \"/pokemon\",{\n      method:\"POST\",\n      headers:{\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(wildPokemon)\n    })\n    .then(response => {\n      if (response.status >= 200 && response.status <= 299) {\n        setIsPokemonCaught(true)\n        return response.json();\n      } else {\n        console.log(response);\n        throw Error(response.statusText);\n      }\n    })\n    .catch(error => console.log(error))\n\n    console.log(result);\n    \n  }\n\n\n\n\n\n\n\n  return (\n    <div className=\"map-page\">\n      {currentUser == null ? (\n        <div className=\"surprised-pikachu-page\">\n          <img src={surprisedPikachu} alt={`Image of surprised Pikachu`} className=\"surprised-pikachu\" />\n          <p>You can't catch Pokémon if you haven't logged in! Please login!</p>\n        </div>\n      ) : (\n        <>\n          <div className=\"grid-container\">{grids}</div>\n\n          <div className=\"moves-container\">\n            <FontAwesomeIcon\n              icon={faArrowUp}\n              onClick={moveUp}\n              className=\"btn up-btn\"\n            />\n            <FontAwesomeIcon\n              icon={faArrowRight}\n              onClick={moveRight}\n              className=\"btn right-btn\"\n            />\n            <FontAwesomeIcon\n              icon={faArrowDown}\n              onClick={moveDown}\n              className=\"btn down-btn\"\n            />\n            <FontAwesomeIcon\n              icon={faArrowLeft}\n              onClick={moveLeft}\n              className=\"btn left-btn\"\n            />\n            <img src={userSprite} alt=\"User sprite\" className=\"user-sprite\" />\n          </div>\n\n          <div className=\"wild-pokemon-container\">\n            {foundWildPokemon ? (\n              <>\n                <img\n                  src={wildPokemon.sprite_link}\n                  alt=\"\"\n                  className=\"wildPokemon-sprite\"\n                />\n                <p>{`A wild ${wildPokemon.name} appeared.`}</p>\n                <p>{`Level: ${wildPokemon.level}`}</p>\n                {isPokemonCaught ? \n                <p>{`The wild ${wildPokemon.name} has been captured.`}</p> \n                :\n                <button className=\"btn\" onClick={addPokemonToDb}>Catch</button>\n                }\n              </>\n            ) : (\n              <p>No wild pokemon found</p>\n            )}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}\n","/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/components/Pokemon.js",["95","96","97"],[],"import React from 'react'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\n\n// Passing in the single pokemon as a prop\n\n\nexport const Pokemon = ({ pokemon, releasePokemon }) => {\n\n  const handleReleaseButton = ()=>{    \n    releasePokemon(pokemon.id)\n  }\n\n  return (\n    <div className=\"pokemonCard\">\n      <h3 className=\"card-title\">{pokemon.name}</h3>\n      <div className=\"card-img-container\">\n        <img src={pokemon.sprite_link} alt={`Image of ${pokemon.name}`} className=\"pokemon-sprite\" />\n      </div>\n      <br />\n      <p>{`National Pokedex Number: #${pokemon.pokeapi_id}`}</p>\n      <br />\n      <p className='pokemon-hp'>{`HP: ${pokemon.hp}`}</p>\n      <p className='pokemon-level'>{`Level: ${pokemon.level}`}</p>\n\n      <button className=\"release-btn\" onClick={handleReleaseButton}>Release</button>\n    </div>\n  );\n};\n",{"ruleId":"98","severity":1,"message":"99","line":12,"column":10,"nodeType":"100","messageId":"101","endLine":12,"endColumn":20},{"ruleId":"102","severity":1,"message":"103","line":18,"column":27,"nodeType":"104","messageId":"105","endLine":18,"endColumn":29},{"ruleId":"102","severity":1,"message":"103","line":26,"column":20,"nodeType":"104","messageId":"105","endLine":26,"endColumn":22},{"ruleId":"102","severity":1,"message":"106","line":1,"column":48,"nodeType":"104","messageId":"105","endLine":1,"endColumn":50},{"ruleId":"102","severity":1,"message":"103","line":37,"column":42,"nodeType":"104","messageId":"105","endLine":37,"endColumn":44},{"ruleId":"107","severity":1,"message":"108","line":43,"column":6,"nodeType":"109","endLine":43,"endColumn":19,"suggestions":"110"},{"ruleId":"111","severity":1,"message":"112","line":99,"column":9,"nodeType":"113","endLine":99,"endColumn":104},{"ruleId":"111","severity":1,"message":"112","line":114,"column":9,"nodeType":"113","endLine":114,"endColumn":92},{"ruleId":"102","severity":1,"message":"103","line":57,"column":20,"nodeType":"104","messageId":"105","endLine":57,"endColumn":22},{"ruleId":"98","severity":1,"message":"114","line":26,"column":8,"nodeType":"100","messageId":"101","endLine":26,"endColumn":27},{"ruleId":"98","severity":1,"message":"115","line":2,"column":10,"nodeType":"100","messageId":"101","endLine":2,"endColumn":18},{"ruleId":"98","severity":1,"message":"116","line":2,"column":20,"nodeType":"100","messageId":"101","endLine":2,"endColumn":29},{"ruleId":"98","severity":1,"message":"117","line":3,"column":8,"nodeType":"100","messageId":"101","endLine":3,"endColumn":18},{"ruleId":"98","severity":1,"message":"118","line":4,"column":8,"nodeType":"100","messageId":"101","endLine":4,"endColumn":14},{"ruleId":"98","severity":1,"message":"119","line":5,"column":8,"nodeType":"100","messageId":"101","endLine":5,"endColumn":12},{"ruleId":"98","severity":1,"message":"120","line":6,"column":8,"nodeType":"100","messageId":"101","endLine":6,"endColumn":23},{"ruleId":"98","severity":1,"message":"121","line":7,"column":8,"nodeType":"100","messageId":"101","endLine":7,"endColumn":15},{"ruleId":"98","severity":1,"message":"122","line":8,"column":8,"nodeType":"100","messageId":"101","endLine":8,"endColumn":24},{"ruleId":"98","severity":1,"message":"123","line":9,"column":8,"nodeType":"100","messageId":"101","endLine":9,"endColumn":21},{"ruleId":"102","severity":1,"message":"106","line":23,"column":15,"nodeType":"104","messageId":"105","endLine":23,"endColumn":17},{"ruleId":"102","severity":1,"message":"106","line":32,"column":52,"nodeType":"104","messageId":"105","endLine":32,"endColumn":54},{"ruleId":"102","severity":1,"message":"106","line":41,"column":51,"nodeType":"104","messageId":"105","endLine":41,"endColumn":53},{"ruleId":"107","severity":1,"message":"124","line":105,"column":5,"nodeType":"109","endLine":105,"endColumn":20,"suggestions":"125"},{"ruleId":"107","severity":1,"message":"126","line":136,"column":6,"nodeType":"109","endLine":136,"endColumn":20,"suggestions":"127"},{"ruleId":"111","severity":1,"message":"112","line":172,"column":11,"nodeType":"113","endLine":172,"endColumn":106},{"ruleId":"98","severity":1,"message":"128","line":2,"column":10,"nodeType":"100","messageId":"101","endLine":2,"endColumn":25},{"ruleId":"98","severity":1,"message":"129","line":3,"column":10,"nodeType":"100","messageId":"101","endLine":3,"endColumn":17},{"ruleId":"111","severity":1,"message":"112","line":18,"column":9,"nodeType":"113","endLine":18,"endColumn":102},"no-unused-vars","'SERVER_URL' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getPokemonList'. Either include it or remove the dependency array.","ArrayExpression",["130"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'invalidInputWarning' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'userSprite' is defined but never used.","'Footer' is defined but never used.","'home' is defined but never used.","'home_background' is defined but never used.","'pikachu' is defined but never used.","'green_background' is defined but never used.","'pikachu_sleep' is defined but never used.","React Hook useEffect has a missing dependency: 'grabPokemon'. Either include it or remove the dependency array.",["131"],"React Hook useEffect has a missing dependency: 'wildPokemonIdGenerator'. Either include it or remove the dependency array.",["132"],"'FontAwesomeIcon' is defined but never used.","'faTrash' is defined but never used.",{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [currentUser, getPokemonList]",{"range":"139","text":"140"},"Update the dependencies array to be: [grabPokemon, wildPokemonId]",{"range":"141","text":"142"},"Update the dependencies array to be: [userPosition, wildPokemonIdGenerator]",{"range":"143","text":"144"},[1285,1298],"[currentUser, getPokemonList]",[3036,3051],"[grabPokemon, wildPokemonId]",[4020,4034],"[userPosition, wildPokemonIdGenerator]"]