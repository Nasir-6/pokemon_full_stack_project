{"ast":null,"code":"import _slicedToArray from\"/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import'./App.css';import Navbar from'./containers/Navbar';import Footer from'./containers/Footer';import Home from'./pages/Home';import Login from'./pages/Login';import Map from'./pages/Map';import Signup from'./pages/Signup';import Pokedex from'./pages/Pokedex';import{BrowserRouter as Router,Route,Routes}from'react-router-dom';import{useState,useEffect}from'react';import{SERVER_URL}from'./Constants';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){console.log(SERVER_URL);var _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),currentUser=_useState2[0],setCurrentUser=_useState2[1];//Store the currentUser in sessionStorage everytime it changes\nuseEffect(function(){// If statement prevents overwriting the sessionStorage on refresh with empty string \"\"\n// whilst also allowing logged out (null user) information to be stored in sessionStorage\n// Keeping track of both logged in/out user states\nif(currentUser!=\"\"){sessionStorage.setItem(\"currentUser\",JSON.stringify(currentUser));}},[currentUser]);// USECONTEXT!!! - designed for handling a logged in user! - have state without need for propdrilling!\n// context is declared as a component - but could use wherever\n// Redux - managing state - but not for login - used for updating lots of state, - need to design app ahead of time for redux\n// On mount (when Refreshed) retrieve the currentUser stored in sessionStorage \nuseEffect(function(){// First grab from sessionStorage - Parse into a object as stored as a string in sessionStorage\nvar currentUserInSessionStorage=JSON.parse(sessionStorage.getItem(\"currentUser\"));console.log(currentUserInSessionStorage);setCurrentUser(currentUserInSessionStorage);},[]);return/*#__PURE__*/_jsx(Router,{children:/*#__PURE__*/_jsx(\"div\",{className:\"background-overlay\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"app\",children:[/*#__PURE__*/_jsx(Navbar,{currentUser:currentUser,updateCurrentUser:function updateCurrentUser(update){return setCurrentUser(update);}}),/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{exact:true,path:\"/\",element:/*#__PURE__*/_jsx(Home,{currentUser:currentUser})}),/*#__PURE__*/_jsx(Route,{exact:true,path:\"/login\",element:/*#__PURE__*/_jsx(Login,{updateCurrentUser:function updateCurrentUser(update){return setCurrentUser(update);}})}),/*#__PURE__*/_jsx(Route,{exact:true,path:\"/signup\",element:/*#__PURE__*/_jsx(Signup,{})}),/*#__PURE__*/_jsx(Route,{exact:true,path:\"/map\",element:/*#__PURE__*/_jsx(Map,{currentUser:currentUser})}),/*#__PURE__*/_jsx(Route,{exact:true,path:\"/pokedex\",element:/*#__PURE__*/_jsx(Pokedex,{currentUser:currentUser})})]}),/*#__PURE__*/_jsx(Footer,{})]})})});}export default App;","map":{"version":3,"sources":["/Users/nasir/coding/pokemon_full_stack_project/pokemon-back-end/src/front-end/src/App.js"],"names":["Navbar","Footer","Home","Login","Map","Signup","Pokedex","BrowserRouter","Router","Route","Routes","useState","useEffect","SERVER_URL","App","console","log","currentUser","setCurrentUser","sessionStorage","setItem","JSON","stringify","currentUserInSessionStorage","parse","getItem","update"],"mappings":"mKACA,MAAO,WAAP,CACA,MAAOA,CAAAA,MAAP,KAAmB,qBAAnB,CACA,MAAOC,CAAAA,MAAP,KAAmB,qBAAnB,CACA,MAAOC,CAAAA,IAAP,KAAiB,cAAjB,CACA,MAAOC,CAAAA,KAAP,KAAkB,eAAlB,CACA,MAAOC,CAAAA,GAAP,KAAgB,aAAhB,CACA,MAAOC,CAAAA,MAAP,KAAmB,gBAAnB,CACA,MAAOC,CAAAA,OAAP,KAAoB,iBAApB,CACA,OAASC,aAAa,GAAIC,CAAAA,MAA1B,CAAkCC,KAAlC,CAAyCC,MAAzC,KAAuD,kBAAvD,CACA,OAASC,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,OAASC,UAAT,KAA2B,aAA3B,C,wFAGA,QAASC,CAAAA,GAAT,EAAe,CAEbC,OAAO,CAACC,GAAR,CAAYH,UAAZ,EACA,cAAsCF,QAAQ,CAAC,EAAD,CAA9C,wCAAOM,WAAP,eAAoBC,cAApB,eAEA;AACAN,SAAS,CAAC,UAAI,CACZ;AACA;AACA;AACA,GAAGK,WAAW,EAAI,EAAlB,CAAqB,CACnBE,cAAc,CAACC,OAAf,CAAuB,aAAvB,CAAsCC,IAAI,CAACC,SAAL,CAAeL,WAAf,CAAtC,EACD,CACF,CAPQ,CAON,CAACA,WAAD,CAPM,CAAT,CASA;AACA;AACA;AAGA;AACAL,SAAS,CAAC,UAAI,CACZ;AACA,GAAMW,CAAAA,2BAA2B,CAAGF,IAAI,CAACG,KAAL,CAAWL,cAAc,CAACM,OAAf,CAAuB,aAAvB,CAAX,CAApC,CACAV,OAAO,CAACC,GAAR,CAAYO,2BAAZ,EACAL,cAAc,CAACK,2BAAD,CAAd,CACD,CALQ,CAKN,EALM,CAAT,CAUA,mBACE,KAAC,MAAD,wBACE,YAAK,SAAS,CAAC,oBAAf,uBACE,aAAK,SAAS,CAAC,KAAf,wBACE,KAAC,MAAD,EAAQ,WAAW,CAAEN,WAArB,CAAkC,iBAAiB,CAAE,2BAACS,MAAD,QAAWR,CAAAA,cAAc,CAACQ,MAAD,CAAzB,EAArD,EADF,cAIE,MAAC,MAAD,yBACE,KAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,CAAC,GAAlB,CAAsB,OAAO,cAAE,KAAC,IAAD,EAAM,WAAW,CAAET,WAAnB,EAA/B,EADF,cAEE,KAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,CAAC,QAAlB,CAA2B,OAAO,cAAE,KAAC,KAAD,EAAO,iBAAiB,CAAE,2BAACS,MAAD,QAAWR,CAAAA,cAAc,CAACQ,MAAD,CAAzB,EAA1B,EAApC,EAFF,cAGE,KAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,CAAC,SAAlB,CAA4B,OAAO,cAAE,KAAC,MAAD,IAArC,EAHF,cAIE,KAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,CAAC,MAAlB,CAAyB,OAAO,cAAE,KAAC,GAAD,EAAK,WAAW,CAAET,WAAlB,EAAlC,EAJF,cAKE,KAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,CAAC,UAAlB,CAA6B,OAAO,cAAE,KAAC,OAAD,EAAS,WAAW,CAAEA,WAAtB,EAAtC,EALF,GAJF,cAYE,KAAC,MAAD,IAZF,GADF,EADF,EADF,CAoBD,CAED,cAAeH,CAAAA,GAAf","sourcesContent":["\nimport './App.css';\nimport Navbar from './containers/Navbar';\nimport Footer from './containers/Footer';\nimport Home from './pages/Home';\nimport Login from './pages/Login';\nimport Map from './pages/Map';\nimport Signup from './pages/Signup';\nimport Pokedex from './pages/Pokedex';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\nimport { useState, useEffect } from 'react';\nimport { SERVER_URL } from './Constants';\n\n\nfunction App() {\n\n  console.log(SERVER_URL)\n  const [currentUser, setCurrentUser] = useState(\"\");\n\n  //Store the currentUser in sessionStorage everytime it changes\n  useEffect(()=>{\n    // If statement prevents overwriting the sessionStorage on refresh with empty string \"\"\n    // whilst also allowing logged out (null user) information to be stored in sessionStorage\n    // Keeping track of both logged in/out user states\n    if(currentUser != \"\"){\n      sessionStorage.setItem(\"currentUser\", JSON.stringify(currentUser))\n    }\n  }, [currentUser])\n\n  // USECONTEXT!!! - designed for handling a logged in user! - have state without need for propdrilling!\n  // context is declared as a component - but could use wherever\n  // Redux - managing state - but not for login - used for updating lots of state, - need to design app ahead of time for redux\n  \n\n  // On mount (when Refreshed) retrieve the currentUser stored in sessionStorage \n  useEffect(()=>{\n    // First grab from sessionStorage - Parse into a object as stored as a string in sessionStorage\n    const currentUserInSessionStorage = JSON.parse(sessionStorage.getItem(\"currentUser\"))\n    console.log(currentUserInSessionStorage)\n    setCurrentUser(currentUserInSessionStorage)\n  }, [])\n\n\n\n\n  return (\n    <Router>\n      <div className=\"background-overlay\">\n        <div className=\"app\">\n          <Navbar currentUser={currentUser} updateCurrentUser={(update)=> setCurrentUser(update)}/>\n          \n\n          <Routes>\n            <Route exact path=\"/\" element={<Home currentUser={currentUser} />} />\n            <Route exact path=\"/login\" element={<Login updateCurrentUser={(update)=> setCurrentUser(update)} />}/>\n            <Route exact path=\"/signup\" element={<Signup />} />\n            <Route exact path=\"/map\" element={<Map currentUser={currentUser}/>} />\n            <Route exact path=\"/pokedex\" element={<Pokedex currentUser={currentUser}/>} />\n          </Routes>\n\n          <Footer />\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}